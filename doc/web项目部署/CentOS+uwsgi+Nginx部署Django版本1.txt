0.预备
首先检查数据库是否建立，以及settings.py中的数据库相关配置
安装：
uwsgi：pip install uwsgi
Nginx：yum install nginx

1.为了使项目能被外网访问，确保settings.py里的ALLOWED_HOSTS设置如下：
	ALLOWED_HOSTS = ['*']

2.检查项目能否正常运行：
	cd到项目目录：执行python manage.py runserver 0.0.0.0:80，确认外网可以正常访问项目
			  后Ctrl+C终止
	还是在项目目录：执行uwsgi --http :80 —moudle 项目名.wsgi（效果和runserver类似），确
			  认外网也能正常访问后Ctrl+C

3.修改项目里的settings.py：
	1）DEBUG=True改为False
	2）注释掉：
	#STATICFILES_DIRS = [
	#    os.path.join(BASE_DIR, 'static')
	#]
	3）添加：
	STATIC_ROOT = os.path.join(BASE_DIR, 'static')
	4）假如还未使用manage.py收集过项目的静态文件，可以通过python manage.py collectstatic进行收集，收集完后会在项目根目录下生成一个static目录

4.编写uwsgi的ini配置文件用于启动Django：
在项目目录下新建一个名为my_uwsgi.ini的uwsgi配置文件，填入以下内容：
[uwsgi]
socket = 127.0.0.1:8000
# Django-related settings
# the django project directory (full path)
chdir = /Python36Projects/项目名称
# Django's wsgi file
module = 项目名称.wsgi
# process-related settings
# master
master = true
# maximum number of worker processes
processes = 2
threads = 2
max-requests = 6000
# ... with appropriate permissions - may be needed
chmod-socket = 664
# clear environment on exit
vacuum = true
#命令行快速重启uwsgi来代替kill + uwsgi
#启动的my_uwsgi.ini文件中配置：pidfile=/data/logs/uwsgi/uwsgi.pid
#这样之后，就可以通过
#>>> uwsgi --reload /data/logs/uwsgi/uwsgi.pid
#来快速重启uwsgi了
pidfile = /data/logs/uwsgi/uwsgi.pid

注：以上配置仅供参考，可以自定义配置


5.修改Nginx的conf配置文件：
在http{}中添加一个server，内容大致如下：
	server {
		listen       8001;	#监听8001端口，可以直接写80
       		server_name  项目名称;	#server的名称，随意
		location /{
			include uwsgi_params;
			uwsgi_pass 127.0.0.1:8000;	#转发到8000
		}
		location /static{	#指向Django的static目录
			alias /Python36Projects/项目名称/static;
		}
	}

注：以上配置仅供参考，可以自定义配置

6.在项目目录下执行uwsgi --ini my_uwsgi.ini 启动Django项目，重启Nginx使配置生效。

7.Linux下，使用Anaconda3部署Django产生的问题：libicuil8n.so.58缺失问题
参考解决：http://www.mamicode.com/info-detail-2283537.html   

>>> which uwsgi
输出一个uwsgi所在目录，假设其为x
>>> ldd x
# 可以看到一些not found的包
(py3) [root@localhost ~]# which uwsgi
/root/anaconda3/envs/py3/bin/uwsgi
(py3) [root@localhost ~]# ldd /root/anaconda3/envs/py3/bin/uwsgi
    linux-vdso.so.1 =>  (0x00007ffc14fc7000)
    libpthread.so.0 => /lib64/libpthread.so.0 (0x00007ff6b0347000)
    libm.so.6 => /lib64/libm.so.6 (0x00007ff6b0045000)
    libdl.so.2 => /lib64/libdl.so.2 (0x00007ff6afe40000)
    libpcre.so.1 => /lib64/libpcre.so.1 (0x00007ff6afbde000)
    libxml2.so.2 => /lib64/libxml2.so.2 (0x00007ff6af874000)
    libz.so.1 => /lib64/libz.so.1 (0x00007ff6af65d000)
    liblzma.so.5 => /lib64/liblzma.so.5 (0x00007ff6af437000)
    libicui18n.so.58 => not found
    libicuuc.so.58 => not found
    libicudata.so.58 => not found
    libutil.so.1 => /lib64/libutil.so.1 (0x00007ff6af233000)
    librt.so.1 => /lib64/librt.so.1 (0x00007ff6af02a000)
    libcrypt.so.1 => /lib64/libcrypt.so.1 (0x00007ff6aedf3000)
    libc.so.6 => /lib64/libc.so.6 (0x00007ff6aea30000)
    /lib64/ld-linux-x86-64.so.2 (0x00005634c289c000)
    libfreebl3.so => /lib64/libfreebl3.so (0x00007ff6ae82c000)
就是三个包not found，那就从anaconda3/lib下把这三个.so文件软连接到/lib64目录下(如果是32位的OS，就软连接到/lib下)
(py3) [root@localhost ~]# ln -s /root/anaconda3/lib/libicui18n.so.58 /lib64/libicui18n.so.58
(py3) [root@localhost ~]# ln -s /root/anaconda3/lib/libicuuc.so.58 /lib64/libicuuc.so.58
(py3) [root@localhost ~]# ln -s /root/anaconda3/lib/libicudata.so.58 /lib64/libicudata.so.58
补充完三个包之后，就继续使用ldd测试
(py3) [root@localhost ~]# ldd /root/anaconda3/envs/py3/bin/uwsgi
/root/anaconda3/envs/py3/bin/uwsgi: /lib64/./libstdc++.so.6: version `CXXABI_1.3.8‘ not found (required by /lib64/libicui18n.so.58)
/root/anaconda3/envs/py3/bin/uwsgi: /lib64/./libstdc++.so.6: version `CXXABI_1.3.9‘ not found (required by /lib64/libicui18n.so.58)
/root/anaconda3/envs/py3/bin/uwsgi: /lib64/./libstdc++.so.6: version `CXXABI_1.3.8‘ not found (required by /lib64/libicuuc.so.58)
/root/anaconda3/envs/py3/bin/uwsgi: /lib64/./libstdc++.so.6: version `CXXABI_1.3.9‘ not found (required by /lib64/libicuuc.so.58)
仍然缺失CXXABI_1.3.8以及1.3.9，使用strings命令查看结果：
[root@localhost lib64]# strings /usr/lib64/libstdc++.so.6|grep CXXABI
CXXABI_1.3
CXXABI_1.3.1
CXXABI_1.3.2
CXXABI_1.3.3
CXXABI_1.3.4
CXXABI_1.3.5
CXXABI_1.3.6
CXXABI_1.3.7
CXXABI_TM_1
确认没有1.3.8和1.3.9，把anaconda3 下的libstdc++.so.6移到/lib64下面, libstdc++.so.6就是libstdc++.so.6.0.24的软链（可以去/lib64下查看ll libstc*），不放心可以先备份下原有的libstdc++.so.6
把libstdc++.so.6.0.24拷贝到/lib64目录下。
　　cp libstdc++.so.6.0.24 /lib64/
删除原来的libstdc++.so.6符号连接。
　　rm -rf libstdc++.so.6
新建新符号连接。
　　ln -s libstdc++.so.6.0.24 libstdc++.so.6
再次执行查看结果符合就哦了。
uwsgi 
或者
uwsgi -ini my_uwsgi.ini


8.命令行快速重启uwsgi来代替kill + uwsgi
启动的my_uwsgi.ini文件中配置：pidfile=/data/logs/uwsgi/uwsgi.pid
这样之后，就可以通过
>>> /usr/local/Anaconda3/bin/uwsgi --reload /data/logs/uwsgi/uwsgi.pid
来快速重启uwsgi了

